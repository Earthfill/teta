name: Deploy to AWS Ec2

on:
  push:
    branches: 
      - main
      
jobs: 
  Build_and_push_image:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg
          echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get -y install docker-ce docker-ce-cli containerd.io

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: 1.0.0
        run: |
          docker build -t $ECR_REGISTRY/firaziadminapi:$IMAGE_TAG .
          docker push $ECR_REGISTRY/firaziadminapi:$IMAGE_TAG
          
  pull_and_deploy_in_ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Installing aws cli
            sudo apt-get update
            sudo apt-get install -y awscli
            
            # Configure AWS credentials
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ secrets.EC2_HOST }}
            
            # Install Docker inside the remote EC2 instance
            sudo apt-get update
            sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg
            echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get -y install docker-ce docker-ce-cli containerd.io
            
            # Authenticate to ECR
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            
            # Start docker service
            # sudo service docker start

            # Add SSH user to the docker group
            sudo usermod -aG docker $USER

            # Run the Docker commands for deployment
            docker pull ${{ secrets.ECR_REGISTRY }}/firaziadminapi:1.0.0
            docker run -dp 8000:8000 ${{ secrets.ECR_REGISTRY }}/firaziadminapi:1.0.0
      
